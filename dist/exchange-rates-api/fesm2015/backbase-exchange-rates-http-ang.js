import { InjectionToken, ɵɵinject, ɵɵdefineNgModule, ɵɵdefineInjector, ɵsetClassMetadata, NgModule, Optional, SkipSelf, ɵɵdefineInjectable, Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { DataModulesManager, createMocks } from '@backbase/foundation-ang/data-http';

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

const EXCHANGE_RATES_BASE_PATH = new InjectionToken('EXCHANGE_RATES_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ExchangeRatesConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    /**
     * Select the correct content-type to use for a request.
     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param contentTypes - the array of content types that are available for selection
     * @returns the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    /**
     * Select the correct accept content-type to use for a request.
     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct accept content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param accepts - the array of content types that are available for selection.
     * @returns the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ExchangeRatesConfiguration');

class ExchangeRatesApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ExchangeRatesApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ExchangeRatesApiModule,
            providers: [{ provide: ExchangeRatesConfiguration, useFactory: configurationFactory }]
        };
    }
}
ExchangeRatesApiModule.ɵfac = function ExchangeRatesApiModule_Factory(t) { return new (t || ExchangeRatesApiModule)(ɵɵinject(ExchangeRatesApiModule, 12), ɵɵinject(HttpClient, 8), ɵɵinject(DataModulesManager, 8), ɵɵinject(ExchangeRatesConfiguration)); };
ExchangeRatesApiModule.ɵmod = ɵɵdefineNgModule({ type: ExchangeRatesApiModule });
ExchangeRatesApiModule.ɵinj = ɵɵdefineInjector({ providers: [], imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵsetClassMetadata(ExchangeRatesApiModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [],
                exports: [],
                providers: []
            }]
    }], function () { return [{ type: ExchangeRatesApiModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: HttpClient, decorators: [{
                type: Optional
            }] }, { type: DataModulesManager, decorators: [{
                type: Optional
            }] }, { type: ExchangeRatesConfiguration }]; }, null); })();

/**
 * Custom HttpParameterCodec
 * Workaround for https://github.com/angular/angular/issues/18261
 */
class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */
class ExchangeHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/serviceName';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ExchangeRatesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getCurrencies(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/v1/exchange/currencies`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCurrenciesUrl() {
        return `${this.configuration.basePath}/v1/exchange/currencies`;
    }
    getRates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _source = requestParameters["source"];
        if (_source === null || _source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling getRates.');
        }
        const _target = requestParameters["target"];
        if (_target === null || _target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling getRates.');
        }
        const _from = requestParameters["from"];
        const _to = requestParameters["to"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_source !== undefined && _source !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _source, 'source');
        }
        if (_target !== undefined && _target !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _target, 'target');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_to !== undefined && _to !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _to, 'to');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/v1/exchange/rates`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getRatesUrl(requestParameters) {
        const _source = requestParameters["source"];
        if (_source === null || _source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling getRates.');
        }
        const _target = requestParameters["target"];
        if (_target === null || _target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling getRates.');
        }
        const _from = requestParameters["from"];
        const _to = requestParameters["to"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_source !== undefined && _source !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _source, 'source');
        }
        if (_target !== undefined && _target !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _target, 'target');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_to !== undefined && _to !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _to, 'to');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/v1/exchange/rates${queryString ? `?${queryString}` : ''}`;
    }
}
ExchangeHttpService.ɵfac = function ExchangeHttpService_Factory(t) { return new (t || ExchangeHttpService)(ɵɵinject(HttpClient), ɵɵinject(EXCHANGE_RATES_BASE_PATH, 8), ɵɵinject(ExchangeRatesConfiguration, 8)); };
ExchangeHttpService.ɵprov = ɵɵdefineInjectable({ token: ExchangeHttpService, factory: ExchangeHttpService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵsetClassMetadata(ExchangeHttpService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: HttpClient }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [EXCHANGE_RATES_BASE_PATH]
            }] }, { type: ExchangeRatesConfiguration, decorators: [{
                type: Optional
            }] }]; }, null); })();

/**
* Mocks provider for /serviceName/v1/exchange/currencies URL pattern
*/
const ExchangeHttpServiceGetCurrenciesMocksProvider = createMocks([{
        urlPattern: "/serviceName/v1/exchange/currencies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "EUR"
                    }, {
                        "code": "GBP"
                    }, {
                        "code": "USD"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
/**
* Mocks provider for /serviceName/v1/exchange/rates URL pattern
*/
const ExchangeHttpServiceGetRatesMocksProvider = createMocks([{
        urlPattern: "/serviceName/v1/exchange/rates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "rate": 1.1279,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-13T00:00:00+0000"
                    }, {
                        "rate": 1.12504,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-12T00:00:00+0000"
                    }, {
                        "rate": 1.12235,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-11T00:00:00+0000"
                    }, {
                        "rate": 1.12341,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-10T00:00:00+0000"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ExchangeHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/serviceName/v1/exchange/currencies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "code": "EUR"
                    }, {
                        "code": "GBP"
                    }, {
                        "code": "USD"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/serviceName/v1/exchange/rates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "rate": 1.1279,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-13T00:00:00+0000"
                    }, {
                        "rate": 1.12504,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-12T00:00:00+0000"
                    }, {
                        "rate": 1.12235,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-11T00:00:00+0000"
                    }, {
                        "rate": 1.12341,
                        "source": "EUR",
                        "target": "USD",
                        "time": "2019-03-10T00:00:00+0000"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

/**
 * Generated bundle index. Do not edit.
 */

export { COLLECTION_FORMATS, CONFIG_TOKEN, EXCHANGE_RATES_BASE_PATH, ExchangeHttpService, ExchangeHttpServiceGetCurrenciesMocksProvider, ExchangeHttpServiceGetRatesMocksProvider, ExchangeHttpServiceMocksProvider, ExchangeRatesApiModule, ExchangeRatesConfiguration };
//# sourceMappingURL=backbase-exchange-rates-http-ang.js.map
