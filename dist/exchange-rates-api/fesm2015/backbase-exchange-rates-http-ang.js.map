{"version":3,"file":"backbase-exchange-rates-http-ang.js","sources":["../../../projects/exchange-rates-api/model/badRequestError.ts","../../../projects/exchange-rates-api/model/currencyItem.ts","../../../projects/exchange-rates-api/model/errorItem.ts","../../../projects/exchange-rates-api/model/exchangeRateItem.ts","../../../projects/exchange-rates-api/model/forbiddenError.ts","../../../projects/exchange-rates-api/model/internalServerError.ts","../../../projects/exchange-rates-api/model/notAcceptableError.ts","../../../projects/exchange-rates-api/model/notFoundError.ts","../../../projects/exchange-rates-api/model/unauthorizedAltError.ts","../../../projects/exchange-rates-api/model/unauthorizedError.ts","../../../projects/exchange-rates-api/model/unsupportedMediaTypeError.ts","../../../projects/exchange-rates-api/variables.ts","../../../projects/exchange-rates-api/configuration.ts","../../../projects/exchange-rates-api/api.module.ts","../../../projects/exchange-rates-api/encoder.ts","../../../projects/exchange-rates-api/api/exchange.service.ts","../../../projects/exchange-rates-api/api/exchange.service.mocks.ts","../../../projects/exchange-rates-api/backbase-exchange-rates-http-ang.ts"],"sourcesContent":["/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { ErrorItem } from './errorItem';\n\n\nexport interface BadRequestError { \n    /**\n     * Any further information\n     */\n    [\"message\"]: string;\n    /**\n     * Detailed error information\n     */\n    [\"errors\"]?: Array<ErrorItem>;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface CurrencyItem { \n    /**\n     * Currency code\n     */\n    [\"code\"]: string;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * A validation error\n */\nexport interface ErrorItem { \n    /**\n     * Default Message. Any further information.\n     */\n    [\"message\"]?: string;\n    /**\n     * {capability-name}.api.{api-key-name}. For generated validation errors this is the path in the document the error resolves to. e.g. object name + \\'.\\' + field\n     */\n    [\"key\"]?: string;\n    /**\n     * Context can be anything used to construct localised messages.\n     */\n    [\"context\"]?: object;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface ExchangeRateItem { \n    /**\n     * Exchange rate value.\n     */\n    [\"rate\"]: number;\n    /**\n     * Source(send) currency code\n     */\n    [\"source\"]: string;\n    /**\n     * Target(receive) currency code\n     */\n    [\"target\"]: string;\n    /**\n     * Timestamp for exchange rate.\n     */\n    [\"time\"]: string;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { ErrorItem } from './errorItem';\n\n\nexport interface ForbiddenError { \n    /**\n     * Any further information\n     */\n    [\"message\"]?: string;\n    /**\n     * Detailed error information\n     */\n    [\"errors\"]?: Array<ErrorItem>;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Represents HTTP 500 Internal Server Error\n */\nexport interface InternalServerError { \n    /**\n     * Further Information\n     */\n    [\"message\"]: string;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface NotAcceptableError { \n    [\"message\"]?: string;\n    /**\n     * List of supported media types for this endpoint\n     */\n    [\"supportedMediaTypes\"]?: Array<string>;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { ErrorItem } from './errorItem';\n\n\nexport interface NotFoundError { \n    /**\n     * Any further information\n     */\n    [\"message\"]?: string;\n    /**\n     * Detailed error information\n     */\n    [\"errors\"]?: Array<ErrorItem>;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { ErrorItem } from './errorItem';\n\n\nexport interface UnauthorizedAltError { \n    /**\n     * Any further information\n     */\n    [\"message\"]?: string;\n    /**\n     * Detailed error information\n     */\n    [\"errors\"]?: Array<ErrorItem>;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface UnauthorizedError { \n    [\"message\"]: string;\n}\n\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { ErrorItem } from './errorItem';\n\n\nexport interface UnsupportedMediaTypeError { \n    /**\n     * Any further information\n     */\n    [\"message\"]?: string;\n    /**\n     * Detailed error information\n     */\n    [\"errors\"]?: Array<ErrorItem>;\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const EXCHANGE_RATES_BASE_PATH = new InjectionToken<string>('EXCHANGE_RATES_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface ExchangeRatesConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class ExchangeRatesConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ExchangeRatesConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module ExchangeRatesConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { ExchangeRatesConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class ExchangeRatesApiModule {\n    public static forRoot(configurationFactory: () => ExchangeRatesConfiguration): ModuleWithProviders<ExchangeRatesApiModule> {\n        return {\n            ngModule: ExchangeRatesApiModule,\n            providers: [ { provide: ExchangeRatesConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ExchangeRatesApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: ExchangeRatesConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('ExchangeRatesApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { CurrencyItem } from '../model/models';\nimport { ExchangeRateItem } from '../model/models';\nimport { InternalServerError } from '../model/models';\n\nimport { EXCHANGE_RATES_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ExchangeRatesConfiguration }                                     from '../configuration';\n\n\nexport interface GetRatesRequestParams {\n    /** The currency that we want to convert from. */\n    [\"source\"]: string;\n    /** The currency that we want to convert to. */\n    [\"target\"]: string;\n    /** The starting date of the list of exchange rates (date only, always starting at 00:00 of that day) */\n    [\"from\"]?: string;\n    /** The ending date of the list of exchange rates (date only, always ending at 23:59 of that day) */\n    [\"to\"]?: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangeHttpService {\n\n    protected basePath = '/serviceName';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ExchangeRatesConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(EXCHANGE_RATES_BASE_PATH) basePath: string, @Optional() configuration: ExchangeRatesConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Returns all available currencies.\n     * Returns all available currencies.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrencies(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<CurrencyItem>>;\n    public getCurrencies(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<CurrencyItem>>>;\n    public getCurrencies(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<CurrencyItem>>>;\n    public getCurrencies(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<CurrencyItem>>(`${this.configuration.basePath}/v1/exchange/currencies`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getCurrenciesUrl(): string {\n        return `${this.configuration.basePath}/v1/exchange/currencies`;\n    }\n\n    /**\n     * Returns the exchange rates for a particular pair of currencies in a given time period.\n     * Returns the exchange rates for a particular pair of currencies in a given time period.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ExchangeRateItem>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ExchangeRateItem>>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ExchangeRateItem>>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _source = requestParameters[\"source\"];\n        if (_source === null || _source === undefined) {\n            throw new Error('Required parameter source was null or undefined when calling getRates.');\n        }\n        const _target = requestParameters[\"target\"];\n        if (_target === null || _target === undefined) {\n            throw new Error('Required parameter target was null or undefined when calling getRates.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _to = requestParameters[\"to\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_source !== undefined && _source !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_source, 'source');\n        }\n        if (_target !== undefined && _target !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_target, 'target');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_to !== undefined && _to !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_to, 'to');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ExchangeRateItem>>(`${this.configuration.basePath}/v1/exchange/rates`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getRatesUrl(requestParameters: GetRatesRequestParams): string {\n        const _source = requestParameters[\"source\"];\n        if (_source === null || _source === undefined) {\n            throw new Error('Required parameter source was null or undefined when calling getRates.');\n        }\n        const _target = requestParameters[\"target\"];\n        if (_target === null || _target === undefined) {\n            throw new Error('Required parameter target was null or undefined when calling getRates.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _to = requestParameters[\"to\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_source !== undefined && _source !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_source, 'source');\n        }\n        if (_target !== undefined && _target !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_target, 'target');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_to !== undefined && _to !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_to, 'to');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/v1/exchange/rates${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /serviceName/v1/exchange/currencies URL pattern\n*/\nexport const ExchangeHttpServiceGetCurrenciesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/serviceName/v1/exchange/currencies\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\r\n  \"code\" : \"EUR\"\r\n}, {\r\n  \"code\" : \"GBP\"\r\n}, {\r\n  \"code\" : \"USD\"\r\n} ]\n                },\n                {\n                    status: 400,\n                    body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n                },\n                {\n                    status: 500,\n                    body: {\r\n  \"message\" : \"Description of error\"\r\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /serviceName/v1/exchange/rates URL pattern\n*/\nexport const ExchangeHttpServiceGetRatesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/serviceName/v1/exchange/rates\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\r\n  \"rate\" : 1.1279,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-13T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12504,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-12T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12235,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-11T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12341,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-10T00:00:00+0000\"\r\n} ]\n                },\n                {\n                    status: 400,\n                    body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n                },\n                {\n                    status: 500,\n                    body: {\r\n  \"message\" : \"Description of error\"\r\n}\n                },\n    ]\n}]);\n\nexport const ExchangeHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/serviceName/v1/exchange/currencies\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\r\n  \"code\" : \"EUR\"\r\n}, {\r\n  \"code\" : \"GBP\"\r\n}, {\r\n  \"code\" : \"USD\"\r\n} ]\n            },\n\n            {\n                status: 400,\n                body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n            },\n\n            {\n                status: 500,\n                body: {\r\n  \"message\" : \"Description of error\"\r\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/serviceName/v1/exchange/rates\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\r\n  \"rate\" : 1.1279,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-13T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12504,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-12T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12235,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-11T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12341,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-10T00:00:00+0000\"\r\n} ]\n            },\n\n            {\n                status: 400,\n                body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n            },\n\n            {\n                status: 500,\n                body: {\r\n  \"message\" : \"Description of error\"\r\n}\n            },\n    ]\n},\n]\n);\n\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}