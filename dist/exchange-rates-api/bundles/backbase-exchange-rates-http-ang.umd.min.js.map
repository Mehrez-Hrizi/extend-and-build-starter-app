{"version":3,"sources":["../../../projects/exchange-rates-api/variables.ts","../../../projects/exchange-rates-api/configuration.ts","../../../projects/exchange-rates-api/api.module.ts","../../../projects/exchange-rates-api/encoder.ts","../../../projects/exchange-rates-api/api/exchange.service.ts","../../../projects/exchange-rates-api/api/exchange.service.mocks.ts"],"names":["EXCHANGE_RATES_BASE_PATH","InjectionToken","ExchangeRatesConfiguration","configurationParameters","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","prototype","selectHeaderContentType","contentTypes","_this","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","ExchangeRatesApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","i0","ɵɵinject","i1","HttpClient","i2","DataModulesManager","imports","NgModule","declarations","exports","decorators","Optional","SkipSelf","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","ExchangeHttpService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","getCurrencies","observe","reportProgress","options","httpHeaderAcceptSelected","httpHeaderAccept","set","responseType","startsWith","get","getCurrenciesUrl","getRates","requestParameters","_source","_target","_from","_to","queryParameters","HttpParams","params","getRatesUrl","queryString","toString","factory","ɵfac","providedIn","Injectable","Inject","ExchangeHttpServiceGetCurrenciesMocksProvider","createMocks","urlPattern","method","responses","status","body","code","message","errors","context","max","min","ExchangeHttpServiceGetRatesMocksProvider","rate","source","target","time","ExchangeHttpServiceMocksProvider","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const EXCHANGE_RATES_BASE_PATH = new InjectionToken<string>('EXCHANGE_RATES_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface ExchangeRatesConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class ExchangeRatesConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ExchangeRatesConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link ExchangeRatesConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module ExchangeRatesConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { ExchangeRatesConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class ExchangeRatesApiModule {\n    public static forRoot(configurationFactory: () => ExchangeRatesConfiguration): ModuleWithProviders<ExchangeRatesApiModule> {\n        return {\n            ngModule: ExchangeRatesApiModule,\n            providers: [ { provide: ExchangeRatesConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ExchangeRatesApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: ExchangeRatesConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('ExchangeRatesApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Example Service API Spec\n * No description available\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { CurrencyItem } from '../model/models';\nimport { ExchangeRateItem } from '../model/models';\nimport { InternalServerError } from '../model/models';\n\nimport { EXCHANGE_RATES_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { ExchangeRatesConfiguration }                                     from '../configuration';\n\n\nexport interface GetRatesRequestParams {\n    /** The currency that we want to convert from. */\n    [\"source\"]: string;\n    /** The currency that we want to convert to. */\n    [\"target\"]: string;\n    /** The starting date of the list of exchange rates (date only, always starting at 00:00 of that day) */\n    [\"from\"]?: string;\n    /** The ending date of the list of exchange rates (date only, always ending at 23:59 of that day) */\n    [\"to\"]?: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangeHttpService {\n\n    protected basePath = '/serviceName';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new ExchangeRatesConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(EXCHANGE_RATES_BASE_PATH) basePath: string, @Optional() configuration: ExchangeRatesConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Returns all available currencies.\n     * Returns all available currencies.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrencies(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<CurrencyItem>>;\n    public getCurrencies(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<CurrencyItem>>>;\n    public getCurrencies(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<CurrencyItem>>>;\n    public getCurrencies(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<CurrencyItem>>(`${this.configuration.basePath}/v1/exchange/currencies`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getCurrenciesUrl(): string {\n        return `${this.configuration.basePath}/v1/exchange/currencies`;\n    }\n\n    /**\n     * Returns the exchange rates for a particular pair of currencies in a given time period.\n     * Returns the exchange rates for a particular pair of currencies in a given time period.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ExchangeRateItem>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ExchangeRateItem>>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ExchangeRateItem>>>;\n    public getRates(requestParameters: GetRatesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _source = requestParameters[\"source\"];\n        if (_source === null || _source === undefined) {\n            throw new Error('Required parameter source was null or undefined when calling getRates.');\n        }\n        const _target = requestParameters[\"target\"];\n        if (_target === null || _target === undefined) {\n            throw new Error('Required parameter target was null or undefined when calling getRates.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _to = requestParameters[\"to\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_source !== undefined && _source !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_source, 'source');\n        }\n        if (_target !== undefined && _target !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_target, 'target');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_to !== undefined && _to !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_to, 'to');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<ExchangeRateItem>>(`${this.configuration.basePath}/v1/exchange/rates`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getRatesUrl(requestParameters: GetRatesRequestParams): string {\n        const _source = requestParameters[\"source\"];\n        if (_source === null || _source === undefined) {\n            throw new Error('Required parameter source was null or undefined when calling getRates.');\n        }\n        const _target = requestParameters[\"target\"];\n        if (_target === null || _target === undefined) {\n            throw new Error('Required parameter target was null or undefined when calling getRates.');\n        }\n        const _from = requestParameters[\"from\"];\n        const _to = requestParameters[\"to\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_source !== undefined && _source !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_source, 'source');\n        }\n        if (_target !== undefined && _target !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_target, 'target');\n        }\n        if (_from !== undefined && _from !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_from, 'from');\n        }\n        if (_to !== undefined && _to !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_to, 'to');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/v1/exchange/rates${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /serviceName/v1/exchange/currencies URL pattern\n*/\nexport const ExchangeHttpServiceGetCurrenciesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/serviceName/v1/exchange/currencies\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\r\n  \"code\" : \"EUR\"\r\n}, {\r\n  \"code\" : \"GBP\"\r\n}, {\r\n  \"code\" : \"USD\"\r\n} ]\n                },\n                {\n                    status: 400,\n                    body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n                },\n                {\n                    status: 500,\n                    body: {\r\n  \"message\" : \"Description of error\"\r\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /serviceName/v1/exchange/rates URL pattern\n*/\nexport const ExchangeHttpServiceGetRatesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/serviceName/v1/exchange/rates\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: [ {\r\n  \"rate\" : 1.1279,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-13T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12504,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-12T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12235,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-11T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12341,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-10T00:00:00+0000\"\r\n} ]\n                },\n                {\n                    status: 400,\n                    body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n                },\n                {\n                    status: 500,\n                    body: {\r\n  \"message\" : \"Description of error\"\r\n}\n                },\n    ]\n}]);\n\nexport const ExchangeHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/serviceName/v1/exchange/currencies\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\r\n  \"code\" : \"EUR\"\r\n}, {\r\n  \"code\" : \"GBP\"\r\n}, {\r\n  \"code\" : \"USD\"\r\n} ]\n            },\n\n            {\n                status: 400,\n                body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n            },\n\n            {\n                status: 500,\n                body: {\r\n  \"message\" : \"Description of error\"\r\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/serviceName/v1/exchange/rates\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: [ {\r\n  \"rate\" : 1.1279,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-13T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12504,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-12T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12235,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-11T00:00:00+0000\"\r\n}, {\r\n  \"rate\" : 1.12341,\r\n  \"source\" : \"EUR\",\r\n  \"target\" : \"USD\",\r\n  \"time\" : \"2019-03-10T00:00:00+0000\"\r\n} ]\n            },\n\n            {\n                status: 400,\n                body: {\r\n  \"message\" : \"Bad Request\",\r\n  \"errors\" : [ {\r\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\r\n    \"key\" : \"common.api.shoesize\",\r\n    \"context\" : {\r\n      \"max\" : \"50\",\r\n      \"min\" : \"1\"\r\n    }\r\n  } ]\r\n}\n            },\n\n            {\n                status: 500,\n                body: {\r\n  \"message\" : \"Description of error\"\r\n}\n            },\n    ]\n},\n]\n);\n\n\n"]}